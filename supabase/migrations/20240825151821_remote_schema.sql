create sequence "public"."purchases_id_seq";

drop trigger if exists "scheduled_events_encrypt_secret_trigger_notes" on "public"."scheduled_events";

drop policy "Enable update for users based on user_id" on "public"."forms";

drop policy "Enable read access for all users" on "public"."old_users";

alter table "public"."notes" drop constraint "public_notes_event_id_fkey";

drop view if exists "public"."decrypted_scheduled_events";

drop view if exists "public"."decrypted_forms";

alter table "public"."old_users" drop constraint "old_users_pkey";

drop index if exists "public"."old_users_pkey";

create table "public"."old_customers" (
    "id" uuid not null default gen_random_uuid(),
    "stripe_customer_id" text,
    "paypal_id" text,
    "user_id" bigint
);


create table "public"."old_purchases" (
    "id" bigint generated by default as identity not null,
    "user_id" bigint,
    "package_id" text,
    "purchase_date" timestamp without time zone,
    "amount" numeric
);


create table "public"."old_user_courses" (
    "id" uuid not null default gen_random_uuid(),
    "watched_videos" jsonb,
    "course_id" uuid,
    "user_id" bigint
);


create table "public"."purchases" (
    "id" integer not null default nextval('purchases_id_seq'::regclass),
    "user_id" uuid not null,
    "package_id" text not null,
    "purchase_date" timestamp with time zone not null,
    "amount" numeric(10,2) not null
);


create table "public"."task_templates" (
    "id" bigint generated by default as identity not null,
    "name" jsonb not null,
    "task" jsonb default '{}'::jsonb,
    "created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "updated_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "last_run" timestamp with time zone not null,
    "last_run_output" text
);


create table "public"."temp_user_emails" (
    "user_id" bigint,
    "email" text
);


create table "public"."test_user_courses" (
    "id" uuid not null default gen_random_uuid(),
    "watched_videos" jsonb,
    "user_id" uuid,
    "course_id" uuid
);


create table "public"."test_users" (
    "id" uuid not null default gen_random_uuid(),
    "full_name" text,
    "avatar_url" text,
    "billing_address" jsonb,
    "payment_method" jsonb,
    "email" text not null,
    "form_state" text,
    "course_state" text,
    "last_notified" timestamp with time zone,
    "last_logged_in" timestamp with time zone,
    "pending" boolean default false,
    "preferences" jsonb,
    "order_count" smallint,
    "old_user_id" bigint
);


alter table "public"."courses" add column "product_id" text;

alter table "public"."customers" add column "paypal_customer_id" text;

alter table "public"."old_user_meta" disable row level security;

alter table "public"."old_users" disable row level security;

alter table "public"."user_courses" add column "watched_videos" jsonb;

alter table "public"."user_meta" add column "created_at" timestamp with time zone not null;

alter table "public"."user_meta" add column "updated_at" timestamp with time zone not null;

alter table "public"."user_meta" alter column "meta_key" set not null;

alter table "public"."user_meta" alter column "meta_key" set data type text using "meta_key"::text;

alter table "public"."user_meta" alter column "meta_value" set not null;

alter table "public"."user_meta" alter column "meta_value" set data type text using "meta_value"::text;

alter table "public"."user_meta" alter column "user_id" drop default;

alter table "public"."user_meta" alter column "user_id" set not null;

alter table "public"."user_meta" disable row level security;

alter table "public"."users" add column "old_user_id" bigint;

alter table "public"."users" add column "order_count" smallint;

alter table "public"."users" enable row level security;

alter sequence "public"."purchases_id_seq" owned by "public"."purchases"."id";

CREATE UNIQUE INDEX old_purchases_pkey ON public.old_purchases USING btree (id);

CREATE UNIQUE INDEX purchases_pkey ON public.purchases USING btree (id);

CREATE UNIQUE INDEX task_templates_name_key ON public.task_templates USING btree (name);

CREATE UNIQUE INDEX task_templates_pkey ON public.task_templates USING btree (id);

CREATE UNIQUE INDEX test_customers_test1_id_key ON public.old_customers USING btree (id);

CREATE UNIQUE INDEX test_customers_test1_pkey ON public.old_customers USING btree (id);

CREATE UNIQUE INDEX test_user_courses_duplicate_test1_id_key ON public.old_user_courses USING btree (id);

CREATE UNIQUE INDEX test_user_courses_duplicate_test1_pkey ON public.old_user_courses USING btree (id);

CREATE UNIQUE INDEX test_user_courses_id_key ON public.test_user_courses USING btree (id);

CREATE UNIQUE INDEX test_user_courses_pkey ON public.test_user_courses USING btree (id);

CREATE UNIQUE INDEX test_users_old_user_id_key ON public.test_users USING btree (old_user_id);

CREATE UNIQUE INDEX test_users_pkey ON public.test_users USING btree (id);

CREATE UNIQUE INDEX test_users_test1_pkey ON public.old_users USING btree (id);

alter table "public"."old_customers" add constraint "test_customers_test1_pkey" PRIMARY KEY using index "test_customers_test1_pkey";

alter table "public"."old_purchases" add constraint "old_purchases_pkey" PRIMARY KEY using index "old_purchases_pkey";

alter table "public"."old_user_courses" add constraint "test_user_courses_duplicate_test1_pkey" PRIMARY KEY using index "test_user_courses_duplicate_test1_pkey";

alter table "public"."old_users" add constraint "test_users_test1_pkey" PRIMARY KEY using index "test_users_test1_pkey";

alter table "public"."purchases" add constraint "purchases_pkey" PRIMARY KEY using index "purchases_pkey";

alter table "public"."task_templates" add constraint "task_templates_pkey" PRIMARY KEY using index "task_templates_pkey";

alter table "public"."test_user_courses" add constraint "test_user_courses_pkey" PRIMARY KEY using index "test_user_courses_pkey";

alter table "public"."test_users" add constraint "test_users_pkey" PRIMARY KEY using index "test_users_pkey";

alter table "public"."courses" add constraint "courses_product_id_fkey" FOREIGN KEY (product_id) REFERENCES products(id) not valid;

alter table "public"."courses" validate constraint "courses_product_id_fkey";

alter table "public"."old_customers" add constraint "test_customers_test1_id_key" UNIQUE using index "test_customers_test1_id_key";

alter table "public"."old_user_courses" add constraint "test_user_courses_duplicate_test1_course_id_fkey" FOREIGN KEY (course_id) REFERENCES courses(id) not valid;

alter table "public"."old_user_courses" validate constraint "test_user_courses_duplicate_test1_course_id_fkey";

alter table "public"."old_user_courses" add constraint "test_user_courses_duplicate_test1_id_key" UNIQUE using index "test_user_courses_duplicate_test1_id_key";

alter table "public"."purchases" add constraint "fk_user_id" FOREIGN KEY (user_id) REFERENCES users(id) not valid;

alter table "public"."purchases" validate constraint "fk_user_id";

alter table "public"."task_templates" add constraint "task_templates_name_key" UNIQUE using index "task_templates_name_key";

alter table "public"."test_user_courses" add constraint "test_user_courses_course_id_fkey" FOREIGN KEY (course_id) REFERENCES courses(id) not valid;

alter table "public"."test_user_courses" validate constraint "test_user_courses_course_id_fkey";

alter table "public"."test_user_courses" add constraint "test_user_courses_id_key" UNIQUE using index "test_user_courses_id_key";

alter table "public"."test_user_courses" add constraint "test_user_courses_user_id_fkey" FOREIGN KEY (user_id) REFERENCES test_users(id) not valid;

alter table "public"."test_user_courses" validate constraint "test_user_courses_user_id_fkey";

alter table "public"."test_users" add constraint "test_users_old_user_id_key" UNIQUE using index "test_users_old_user_id_key";

alter table "public"."user_meta" add constraint "user_meta_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) not valid;

alter table "public"."user_meta" validate constraint "user_meta_user_id_fkey";

alter table "public"."notes" add constraint "public_notes_event_id_fkey" FOREIGN KEY (event_id) REFERENCES scheduled_events(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."notes" validate constraint "public_notes_event_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.get_customer_count_by_full_name(search_name text)
 RETURNS bigint
 LANGUAGE plpgsql
AS $function$
DECLARE
    matching_count BIGINT;
BEGIN
    SELECT COUNT(*)::BIGINT
    INTO matching_count
    FROM customers c
    JOIN users u ON c.id = u.id
    WHERE u.full_name ILIKE '%' || search_name || '%';

    RETURN matching_count;
END;
$function$
;

CREATE OR REPLACE FUNCTION public.get_user_id(email text)
 RETURNS uuid
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
DECLARE
  user_id uuid;
BEGIN
  SELECT id INTO user_id
  FROM auth.users
  WHERE email = get_user_id.email;

  RETURN user_id;
END;
$function$
;

create or replace view "public"."decrypted_forms" as  SELECT forms.id,
    forms.user_id,
    forms.title,
    forms.status,
    forms.type,
    forms.form,
        CASE
            WHEN (forms.form IS NULL) THEN NULL::text
            ELSE
            CASE
                WHEN ('a01520d9-3c17-4f42-9c6c-ec28ea00eed3' IS NULL) THEN NULL::text
                ELSE convert_from(pgsodium.crypto_aead_det_decrypt(decode(forms.form, 'base64'::text), convert_to(''::text, 'utf8'::name), 'a01520d9-3c17-4f42-9c6c-ec28ea00eed3'::uuid, NULL::bytea), 'utf8'::name)
            END
        END AS decrypted_form,
    forms.created_at,
    forms.updated_at
   FROM forms;


create or replace view "public"."decrypted_notes" as  SELECT notes.id,
    notes.created_at,
    notes.updated_at,
    notes.user_id,
    notes.note,
        CASE
            WHEN (notes.note IS NULL) THEN NULL::text
            ELSE
            CASE
                WHEN ('3eeab938-fc0e-4c24-b4a9-4078feb40d45' IS NULL) THEN NULL::text
                ELSE convert_from(pgsodium.crypto_aead_det_decrypt(decode(notes.note, 'base64'::text), convert_to(''::text, 'utf8'::name), '3eeab938-fc0e-4c24-b4a9-4078feb40d45'::uuid, NULL::bytea), 'utf8'::name)
            END
        END AS decrypted_note,
    notes.event_id
   FROM notes;


create or replace view "public"."decrypted_reports" as  SELECT reports.id,
    reports.report,
        CASE
            WHEN (reports.report IS NULL) THEN NULL::text
            ELSE
            CASE
                WHEN ('9df9fee1-96b9-4032-ab73-518d694038fe' IS NULL) THEN NULL::text
                ELSE convert_from(pgsodium.crypto_aead_det_decrypt(decode(reports.report, 'base64'::text), convert_to(''::text, 'utf8'::name), '9df9fee1-96b9-4032-ab73-518d694038fe'::uuid, NULL::bytea), 'utf8'::name)
            END
        END AS decrypted_report,
    reports.user_id,
    reports.created_at,
    reports.status,
    reports.updated_at
   FROM reports;


CREATE OR REPLACE FUNCTION public.forms_encrypt_secret_form()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
		BEGIN
		        new.form = CASE WHEN new.form IS NULL THEN NULL ELSE
			CASE WHEN 'a01520d9-3c17-4f42-9c6c-ec28ea00eed3' IS NULL THEN NULL ELSE pg_catalog.encode(
			  pgsodium.crypto_aead_det_encrypt(
				pg_catalog.convert_to(new.form, 'utf8'),
				pg_catalog.convert_to(('')::text, 'utf8'),
				'a01520d9-3c17-4f42-9c6c-ec28ea00eed3'::uuid,
				NULL
			  ),
				'base64') END END;
		RETURN new;
		END;
		$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
  -- Insert into public.users table
  INSERT INTO public.users (id, full_name, avatar_url, email)
  VALUES (NEW.id, NEW.raw_user_meta_data->>'full_name', NEW.raw_user_meta_data->>'avatar_url', NEW.email);
  
  -- Prepare the payload
  PERFORM pg_notify(
    'new_user_channel', 
    json_build_object(
      'user_id', NEW.id,
      'email', NEW.email
    )::text
  );
  
  RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.notes_encrypt_secret_note()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
		BEGIN
		        new.note = CASE WHEN new.note IS NULL THEN NULL ELSE
			CASE WHEN '3eeab938-fc0e-4c24-b4a9-4078feb40d45' IS NULL THEN NULL ELSE pg_catalog.encode(
			  pgsodium.crypto_aead_det_encrypt(
				pg_catalog.convert_to(new.note, 'utf8'),
				pg_catalog.convert_to(('')::text, 'utf8'),
				'3eeab938-fc0e-4c24-b4a9-4078feb40d45'::uuid,
				NULL
			  ),
				'base64') END END;
		RETURN new;
		END;
		$function$
;

CREATE OR REPLACE FUNCTION public.reports_encrypt_secret_report()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
		BEGIN
		        new.report = CASE WHEN new.report IS NULL THEN NULL ELSE
			CASE WHEN '9df9fee1-96b9-4032-ab73-518d694038fe' IS NULL THEN NULL ELSE pg_catalog.encode(
			  pgsodium.crypto_aead_det_encrypt(
				pg_catalog.convert_to(new.report, 'utf8'),
				pg_catalog.convert_to(('')::text, 'utf8'),
				'9df9fee1-96b9-4032-ab73-518d694038fe'::uuid,
				NULL
			  ),
				'base64') END END;
		RETURN new;
		END;
		$function$
;

CREATE OR REPLACE FUNCTION public.scheduled_events_encrypt_secret_notes()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
		BEGIN
		        new.notes = CASE WHEN new.notes IS NULL THEN NULL ELSE
			CASE WHEN '9da374b4-03d1-4c9a-b662-0fd8f4ea4762' IS NULL THEN NULL ELSE pg_catalog.encode(
			  pgsodium.crypto_aead_det_encrypt(
				pg_catalog.convert_to(new.notes, 'utf8'),
				pg_catalog.convert_to(('')::text, 'utf8'),
				'9da374b4-03d1-4c9a-b662-0fd8f4ea4762'::uuid,
				NULL
			  ),
				'base64') END END;
		RETURN new;
		END;
		$function$
;

grant delete on table "public"."old_customers" to "anon";

grant insert on table "public"."old_customers" to "anon";

grant references on table "public"."old_customers" to "anon";

grant select on table "public"."old_customers" to "anon";

grant trigger on table "public"."old_customers" to "anon";

grant truncate on table "public"."old_customers" to "anon";

grant update on table "public"."old_customers" to "anon";

grant delete on table "public"."old_customers" to "authenticated";

grant insert on table "public"."old_customers" to "authenticated";

grant references on table "public"."old_customers" to "authenticated";

grant select on table "public"."old_customers" to "authenticated";

grant trigger on table "public"."old_customers" to "authenticated";

grant truncate on table "public"."old_customers" to "authenticated";

grant update on table "public"."old_customers" to "authenticated";

grant delete on table "public"."old_customers" to "service_role";

grant insert on table "public"."old_customers" to "service_role";

grant references on table "public"."old_customers" to "service_role";

grant select on table "public"."old_customers" to "service_role";

grant trigger on table "public"."old_customers" to "service_role";

grant truncate on table "public"."old_customers" to "service_role";

grant update on table "public"."old_customers" to "service_role";

grant delete on table "public"."old_purchases" to "anon";

grant insert on table "public"."old_purchases" to "anon";

grant references on table "public"."old_purchases" to "anon";

grant select on table "public"."old_purchases" to "anon";

grant trigger on table "public"."old_purchases" to "anon";

grant truncate on table "public"."old_purchases" to "anon";

grant update on table "public"."old_purchases" to "anon";

grant delete on table "public"."old_purchases" to "authenticated";

grant insert on table "public"."old_purchases" to "authenticated";

grant references on table "public"."old_purchases" to "authenticated";

grant select on table "public"."old_purchases" to "authenticated";

grant trigger on table "public"."old_purchases" to "authenticated";

grant truncate on table "public"."old_purchases" to "authenticated";

grant update on table "public"."old_purchases" to "authenticated";

grant delete on table "public"."old_purchases" to "service_role";

grant insert on table "public"."old_purchases" to "service_role";

grant references on table "public"."old_purchases" to "service_role";

grant select on table "public"."old_purchases" to "service_role";

grant trigger on table "public"."old_purchases" to "service_role";

grant truncate on table "public"."old_purchases" to "service_role";

grant update on table "public"."old_purchases" to "service_role";

grant delete on table "public"."old_user_courses" to "anon";

grant insert on table "public"."old_user_courses" to "anon";

grant references on table "public"."old_user_courses" to "anon";

grant select on table "public"."old_user_courses" to "anon";

grant trigger on table "public"."old_user_courses" to "anon";

grant truncate on table "public"."old_user_courses" to "anon";

grant update on table "public"."old_user_courses" to "anon";

grant delete on table "public"."old_user_courses" to "authenticated";

grant insert on table "public"."old_user_courses" to "authenticated";

grant references on table "public"."old_user_courses" to "authenticated";

grant select on table "public"."old_user_courses" to "authenticated";

grant trigger on table "public"."old_user_courses" to "authenticated";

grant truncate on table "public"."old_user_courses" to "authenticated";

grant update on table "public"."old_user_courses" to "authenticated";

grant delete on table "public"."old_user_courses" to "service_role";

grant insert on table "public"."old_user_courses" to "service_role";

grant references on table "public"."old_user_courses" to "service_role";

grant select on table "public"."old_user_courses" to "service_role";

grant trigger on table "public"."old_user_courses" to "service_role";

grant truncate on table "public"."old_user_courses" to "service_role";

grant update on table "public"."old_user_courses" to "service_role";

grant delete on table "public"."purchases" to "anon";

grant insert on table "public"."purchases" to "anon";

grant references on table "public"."purchases" to "anon";

grant select on table "public"."purchases" to "anon";

grant trigger on table "public"."purchases" to "anon";

grant truncate on table "public"."purchases" to "anon";

grant update on table "public"."purchases" to "anon";

grant delete on table "public"."purchases" to "authenticated";

grant insert on table "public"."purchases" to "authenticated";

grant references on table "public"."purchases" to "authenticated";

grant select on table "public"."purchases" to "authenticated";

grant trigger on table "public"."purchases" to "authenticated";

grant truncate on table "public"."purchases" to "authenticated";

grant update on table "public"."purchases" to "authenticated";

grant delete on table "public"."purchases" to "service_role";

grant insert on table "public"."purchases" to "service_role";

grant references on table "public"."purchases" to "service_role";

grant select on table "public"."purchases" to "service_role";

grant trigger on table "public"."purchases" to "service_role";

grant truncate on table "public"."purchases" to "service_role";

grant update on table "public"."purchases" to "service_role";

grant delete on table "public"."task_templates" to "anon";

grant insert on table "public"."task_templates" to "anon";

grant references on table "public"."task_templates" to "anon";

grant select on table "public"."task_templates" to "anon";

grant trigger on table "public"."task_templates" to "anon";

grant truncate on table "public"."task_templates" to "anon";

grant update on table "public"."task_templates" to "anon";

grant delete on table "public"."task_templates" to "authenticated";

grant insert on table "public"."task_templates" to "authenticated";

grant references on table "public"."task_templates" to "authenticated";

grant select on table "public"."task_templates" to "authenticated";

grant trigger on table "public"."task_templates" to "authenticated";

grant truncate on table "public"."task_templates" to "authenticated";

grant update on table "public"."task_templates" to "authenticated";

grant delete on table "public"."task_templates" to "service_role";

grant insert on table "public"."task_templates" to "service_role";

grant references on table "public"."task_templates" to "service_role";

grant select on table "public"."task_templates" to "service_role";

grant trigger on table "public"."task_templates" to "service_role";

grant truncate on table "public"."task_templates" to "service_role";

grant update on table "public"."task_templates" to "service_role";

grant delete on table "public"."temp_user_emails" to "anon";

grant insert on table "public"."temp_user_emails" to "anon";

grant references on table "public"."temp_user_emails" to "anon";

grant select on table "public"."temp_user_emails" to "anon";

grant trigger on table "public"."temp_user_emails" to "anon";

grant truncate on table "public"."temp_user_emails" to "anon";

grant update on table "public"."temp_user_emails" to "anon";

grant delete on table "public"."temp_user_emails" to "authenticated";

grant insert on table "public"."temp_user_emails" to "authenticated";

grant references on table "public"."temp_user_emails" to "authenticated";

grant select on table "public"."temp_user_emails" to "authenticated";

grant trigger on table "public"."temp_user_emails" to "authenticated";

grant truncate on table "public"."temp_user_emails" to "authenticated";

grant update on table "public"."temp_user_emails" to "authenticated";

grant delete on table "public"."temp_user_emails" to "service_role";

grant insert on table "public"."temp_user_emails" to "service_role";

grant references on table "public"."temp_user_emails" to "service_role";

grant select on table "public"."temp_user_emails" to "service_role";

grant trigger on table "public"."temp_user_emails" to "service_role";

grant truncate on table "public"."temp_user_emails" to "service_role";

grant update on table "public"."temp_user_emails" to "service_role";

grant delete on table "public"."test_user_courses" to "anon";

grant insert on table "public"."test_user_courses" to "anon";

grant references on table "public"."test_user_courses" to "anon";

grant select on table "public"."test_user_courses" to "anon";

grant trigger on table "public"."test_user_courses" to "anon";

grant truncate on table "public"."test_user_courses" to "anon";

grant update on table "public"."test_user_courses" to "anon";

grant delete on table "public"."test_user_courses" to "authenticated";

grant insert on table "public"."test_user_courses" to "authenticated";

grant references on table "public"."test_user_courses" to "authenticated";

grant select on table "public"."test_user_courses" to "authenticated";

grant trigger on table "public"."test_user_courses" to "authenticated";

grant truncate on table "public"."test_user_courses" to "authenticated";

grant update on table "public"."test_user_courses" to "authenticated";

grant delete on table "public"."test_user_courses" to "service_role";

grant insert on table "public"."test_user_courses" to "service_role";

grant references on table "public"."test_user_courses" to "service_role";

grant select on table "public"."test_user_courses" to "service_role";

grant trigger on table "public"."test_user_courses" to "service_role";

grant truncate on table "public"."test_user_courses" to "service_role";

grant update on table "public"."test_user_courses" to "service_role";

grant delete on table "public"."test_users" to "anon";

grant insert on table "public"."test_users" to "anon";

grant references on table "public"."test_users" to "anon";

grant select on table "public"."test_users" to "anon";

grant trigger on table "public"."test_users" to "anon";

grant truncate on table "public"."test_users" to "anon";

grant update on table "public"."test_users" to "anon";

grant delete on table "public"."test_users" to "authenticated";

grant insert on table "public"."test_users" to "authenticated";

grant references on table "public"."test_users" to "authenticated";

grant select on table "public"."test_users" to "authenticated";

grant trigger on table "public"."test_users" to "authenticated";

grant truncate on table "public"."test_users" to "authenticated";

grant update on table "public"."test_users" to "authenticated";

grant delete on table "public"."test_users" to "service_role";

grant insert on table "public"."test_users" to "service_role";

grant references on table "public"."test_users" to "service_role";

grant select on table "public"."test_users" to "service_role";

grant trigger on table "public"."test_users" to "service_role";

grant truncate on table "public"."test_users" to "service_role";

grant update on table "public"."test_users" to "service_role";

create policy "Enable update for forms based on email"
on "public"."forms"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = user_id))
with check ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable update for users based on email"
on "public"."forms"
as permissive
for all
to public
using (((((auth.jwt() -> 'app_metadata'::text) ->> 'userlevel'::text))::integer = 500))
with check (((((auth.jwt() -> 'app_metadata'::text) ->> 'userlevel'::text))::integer = 500));


create policy "notes admin policy"
on "public"."notes"
as permissive
for all
to authenticated
using ((COALESCE((get_my_claim('userlevel'::text))::integer, 0) = 500))
with check ((COALESCE((get_my_claim('userlevel'::text))::integer, 0) = 500));


create policy "Admins have full access"
on "public"."reports"
as permissive
for all
to public
using (((((auth.jwt() -> 'app_metadata'::text) ->> 'userlevel'::text))::integer = 500))
with check (((((auth.jwt() -> 'app_metadata'::text) ->> 'userlevel'::text))::integer = 500));


create policy "Update Report"
on "public"."reports"
as permissive
for update
to authenticated
using ((auth.uid() = user_id));


create policy "Allow users to access and change their own data"
on "public"."scheduled_events"
as permissive
for all
to authenticated
using ((auth.uid() = user_id))
with check ((auth.uid() = user_id));


create policy "Admin users have full access"
on "public"."users"
as permissive
for all
to public
using (((((auth.jwt() -> 'app_metadata'::text) ->> 'userlevel'::text))::integer = 500))
with check (((((auth.jwt() -> 'app_metadata'::text) ->> 'userlevel'::text))::integer = 500));


create policy "Users have full access to their data"
on "public"."users"
as permissive
for all
to public
using ((( SELECT auth.uid() AS uid) = id))
with check ((( SELECT auth.uid() AS uid) = id));


CREATE TRIGGER on_scheduled_events_submission_approved AFTER UPDATE ON public.scheduled_events FOR EACH ROW EXECUTE FUNCTION supabase_functions.http_request('https://fzrzaevdfhyagixhncuj.supabase.co/functions/v1/trigger_report_gen', 'POST', '{"Content-type":"application/json","Authorization":"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.JIMpB9kb4AXyUvTSRQxGT8Mc-Iukk2jUpSe7UVGQX8s"}', '{}', '1000');


