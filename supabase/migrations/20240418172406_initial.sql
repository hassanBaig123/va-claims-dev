create extension if not exists "wrappers" with schema "extensions";

--create role "zapier" with login password 'vaClaimsasdpword1234!';

create type "public"."aal_level" as enum ('aal1', 'aal2', 'aal3');

create type "public"."action" as enum ('created', 'questions_approved', 'submitted', 'customer_contacted', 'submission_approved');

create type "public"."code_challenge_method" as enum ('s256', 'plain');

create type "public"."delivery_status" as enum ('not_delivered', 'reviewing', 'delivered');

create type "public"."factor_status" as enum ('unverified', 'verified');

create type "public"."factor_type" as enum ('totp', 'webauthn');

create type "public"."form_type" as enum ('intake', 'supplemental');

create type "public"."key_status" as enum ('default', 'valid', 'invalid', 'expired');

create type "public"."key_type" as enum ('aead-ietf', 'aead-det', 'hmacsha512', 'hmacsha256', 'auth', 'shorthash', 'generichash', 'kdf', 'secretbox', 'secretstream', 'stream_xchacha20');

create type "public"."pricing_plan_interval" as enum ('day', 'week', 'month', 'year');

create type "public"."pricing_type" as enum ('one_time', 'recurring');

create type "public"."subscription_status" as enum ('trialing', 'active', 'canceled', 'incomplete', 'incomplete_expired', 'past_due', 'unpaid');

create table "public"."courses" (
    "id" uuid not null default gen_random_uuid(),
    "name" text not null,
    "content" jsonb not null
);


create table "public"."customers" (
    "id" uuid not null,
    "stripe_customer_id" text
);


create table "public"."events" (
    "id" uuid not null default gen_random_uuid(),
    "name" text,
    "type" text,
    "ref_id" uuid,
    "description" text,
    "start_date" timestamp without time zone,
    "end_date" timestamp without time zone,
    "created_at" timestamp without time zone,
    "updated_at" timestamp without time zone default (now() AT TIME ZONE 'utc'::text)
);


create table "public"."forms" (
    "id" uuid not null default gen_random_uuid(),
    "user_id" uuid,
    "title" text,
    "status" action,
    "type" form_type,
    "form" text,
    "created_at" timestamp with time zone not null default now(),
    "user_email" text not null,
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."forms" enable row level security;

create table "public"."notes" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "updated_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "user_id" uuid not null,
    "note" text not null,
    "event_id" uuid not null
);


alter table "public"."notes" enable row level security;

create table "public"."old_user_meta" (
    "umeta_id" bigint generated by default as identity not null,
    "user_id" bigint,
    "meta_key" character varying,
    "meta_value" text
);

alter table "public"."old_user_meta" enable row level security;

create table "public"."old_user_meta_duplicate" (
    "umeta_id" bigint generated by default as identity not null,
    "user_id" bigint not null default '0'::bigint,
    "meta_key" character varying,
    "meta_value" text
);

alter table "public"."old_user_meta_duplicate" enable row level security;

create table "public"."old_users" (
    "id" bigint generated by default as identity not null,
    "user_login" character varying,
    "user_pass" character varying,
    "user_nicename" character varying,
    "user_email" character varying,
    "user_url" character varying,
    "user_registered" timestamp without time zone,
    "user_activation_key" character varying,
    "user_status" bigint default '0'::bigint,
    "display_name" character varying
);

alter table "public"."old_users" enable row level security;

create table "public"."prices" (
    "id" text not null,
    "product_id" text,
    "active" boolean,
    "description" text,
    "unit_amount" bigint,
    "currency" text,
    "type" pricing_type,
    "interval" pricing_plan_interval,
    "interval_count" integer,
    "trial_period_days" integer,
    "metadata" jsonb
);


create table "public"."products" (
    "id" text not null,
    "active" boolean,
    "name" text,
    "description" text,
    "image" text,
    "metadata" jsonb
);


create table "public"."reports" (
    "id" uuid not null default gen_random_uuid(),
    "report" text,
    "user_id" uuid not null,
    "created_at" timestamp with time zone not null default now(),
    "status" action not null default 'created'::action,
    "updated_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text)
);


alter table "public"."reports" enable row level security;

create table "public"."scheduled_events" (
    "id" uuid not null default gen_random_uuid(),
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid,
    "start_time" timestamp with time zone,
    "notes" text,
    "status" action not null default 'created'::action,
    "updated_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text)
);


alter table "public"."scheduled_events" enable row level security;

create table "public"."subscriptions" (
    "id" text not null,
    "user_id" uuid not null,
    "status" subscription_status,
    "metadata" jsonb,
    "price_id" text,
    "quantity" integer,
    "cancel_at_period_end" boolean,
    "created" timestamp with time zone not null default now(),
    "current_period_start" timestamp with time zone not null default now(),
    "current_period_end" timestamp with time zone not null default now(),
    "ended_at" timestamp with time zone default now(),
    "cancel_at" timestamp with time zone default now(),
    "canceled_at" timestamp with time zone default now(),
    "trial_start" timestamp with time zone default now(),
    "trial_end" timestamp with time zone default now(),
    "delivery_status" delivery_status,
    "delivery_id" uuid[]
);


alter table "public"."subscriptions" enable row level security;

create table "public"."swarm_sessions" (
    "id" uuid not null default gen_random_uuid(),
    "user_id" uuid not null,
    "sessions" jsonb not null,
    "created_at" timestamp without time zone default now(),
    "updated_at" timestamp without time zone default now()
);


alter table "public"."swarm_sessions" enable row level security;

create table "public"."user_courses" (
    "id" uuid not null default gen_random_uuid(),
    "user_id" uuid not null,
    "course_id" uuid not null
);


create table "public"."user_meta" (
    "umeta_id" uuid not null default gen_random_uuid(),
    "user_id" uuid default gen_random_uuid(),
    "meta_key" character varying,
    "meta_value" character varying
);


alter table "public"."user_meta" enable row level security;

create table "public"."users" (
    "id" uuid not null default gen_random_uuid(),
    "full_name" text,
    "avatar_url" text,
    "billing_address" jsonb,
    "payment_method" jsonb,
    "email" text not null,
    "form_state" text,
    "course_state" text,
    "last_notified" timestamp with time zone,
    "last_logged_in" timestamp with time zone,
    "pending" boolean default false,
    "preferences" jsonb
);


create table "public"."videos" (
    "id" uuid not null default gen_random_uuid(),
    "title" text not null,
    "description" text,
    "transcript" text,
    "change_log" text
);


CREATE UNIQUE INDEX courses_pkey ON public.courses USING btree (id);

CREATE UNIQUE INDEX customers_pkey ON public.customers USING btree (id);

CREATE UNIQUE INDEX forms_pkey ON public.forms USING btree (id);

CREATE UNIQUE INDEX notes_pkey ON public.notes USING btree (id);

CREATE UNIQUE INDEX old_user_meta_duplicate_pkey ON public.old_user_meta_duplicate USING btree (umeta_id);

CREATE UNIQUE INDEX old_user_meta_pkey ON public.old_user_meta USING btree (umeta_id);

CREATE UNIQUE INDEX old_user_meta_umeta_id_key ON public.old_user_meta USING btree (umeta_id);

CREATE UNIQUE INDEX old_users_pkey ON public.old_users USING btree (id);

CREATE UNIQUE INDEX prices_pkey ON public.prices USING btree (id);

CREATE UNIQUE INDEX products_pkey ON public.products USING btree (id);

CREATE UNIQUE INDEX reports_pkey ON public.reports USING btree (id);

CREATE UNIQUE INDEX scheduled_events_pkey ON public.scheduled_events USING btree (id);

CREATE UNIQUE INDEX subscriptions_pkey ON public.subscriptions USING btree (id);

CREATE UNIQUE INDEX swarm_sessions_pkey ON public.swarm_sessions USING btree (id);

CREATE UNIQUE INDEX swarm_sessions_user_id_unique ON public.swarm_sessions USING btree (user_id);

CREATE UNIQUE INDEX user_courses_pkey ON public.user_courses USING btree (id);

CREATE UNIQUE INDEX user_courses_user_id_course_id_key ON public.user_courses USING btree (user_id, course_id);

CREATE UNIQUE INDEX user_meta_pkey ON public.user_meta USING btree (umeta_id);

CREATE UNIQUE INDEX users_pkey ON public.users USING btree (id);

CREATE UNIQUE INDEX videos_pkey ON public.videos USING btree (id);

alter table "public"."courses" add constraint "courses_pkey" PRIMARY KEY using index "courses_pkey";

alter table "public"."customers" add constraint "customers_pkey" PRIMARY KEY using index "customers_pkey";

alter table "public"."forms" add constraint "forms_pkey" PRIMARY KEY using index "forms_pkey";

alter table "public"."forms" add constraint "public_forms_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."forms" validate constraint "public_forms_user_id_fkey";

alter table "public"."notes" add constraint "notes_pkey" PRIMARY KEY using index "notes_pkey";

alter table "public"."old_user_meta" add constraint "old_user_meta_pkey" PRIMARY KEY using index "old_user_meta_pkey";

alter table "public"."old_user_meta_duplicate" add constraint "old_user_meta_duplicate_pkey" PRIMARY KEY using index "old_user_meta_duplicate_pkey";

alter table "public"."old_users" add constraint "old_users_pkey" PRIMARY KEY using index "old_users_pkey";

alter table "public"."prices" add constraint "prices_pkey" PRIMARY KEY using index "prices_pkey";

alter table "public"."products" add constraint "products_pkey" PRIMARY KEY using index "products_pkey";

alter table "public"."reports" add constraint "reports_pkey" PRIMARY KEY using index "reports_pkey";

alter table "public"."scheduled_events" add constraint "scheduled_events_pkey" PRIMARY KEY using index "scheduled_events_pkey";

alter table "public"."subscriptions" add constraint "subscriptions_pkey" PRIMARY KEY using index "subscriptions_pkey";

alter table "public"."swarm_sessions" add constraint "swarm_sessions_pkey" PRIMARY KEY using index "swarm_sessions_pkey";

alter table "public"."user_courses" add constraint "user_courses_pkey" PRIMARY KEY using index "user_courses_pkey";

alter table "public"."user_meta" add constraint "user_meta_pkey" PRIMARY KEY using index "user_meta_pkey";

alter table "public"."users" add constraint "users_pkey" PRIMARY KEY using index "users_pkey";

alter table "public"."videos" add constraint "videos_pkey" PRIMARY KEY using index "videos_pkey";

alter table "public"."customers" add constraint "customers_id_users_id_fk" FOREIGN KEY (id) REFERENCES users(id) not valid;

alter table "public"."customers" validate constraint "customers_id_users_id_fk";

alter table "public"."notes" add constraint "public_notes_event_id_fkey" FOREIGN KEY (event_id) REFERENCES scheduled_events(id) ON UPDATE CASCADE ON DELETE RESTRICT not valid;

alter table "public"."notes" validate constraint "public_notes_event_id_fkey";

alter table "public"."notes" add constraint "public_notes_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE RESTRICT not valid;

alter table "public"."notes" validate constraint "public_notes_user_id_fkey";

alter table "public"."old_user_meta" add constraint "old_user_meta_umeta_id_key" UNIQUE using index "old_user_meta_umeta_id_key";

alter table "public"."prices" add constraint "prices_product_id_products_id_fk" FOREIGN KEY (product_id) REFERENCES products(id) not valid;

alter table "public"."prices" validate constraint "prices_product_id_products_id_fk";

alter table "public"."reports" add constraint "public_reports_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."reports" validate constraint "public_reports_user_id_fkey";

alter table "public"."scheduled_events" add constraint "public_scheduled_events_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."scheduled_events" validate constraint "public_scheduled_events_user_id_fkey";

alter table "public"."subscriptions" add constraint "subscriptions_price_id_prices_id_fk" FOREIGN KEY (price_id) REFERENCES prices(id) not valid;

alter table "public"."subscriptions" validate constraint "subscriptions_price_id_prices_id_fk";

alter table "public"."subscriptions" add constraint "subscriptions_user_id_users_id_fk" FOREIGN KEY (user_id) REFERENCES users(id) not valid;

alter table "public"."subscriptions" validate constraint "subscriptions_user_id_users_id_fk";

alter table "public"."swarm_sessions" add constraint "swarm_sessions_user_id_unique" UNIQUE using index "swarm_sessions_user_id_unique";

alter table "public"."swarm_sessions" add constraint "swarm_sessions_user_id_users_id_fk" FOREIGN KEY (user_id) REFERENCES users(id) not valid;

alter table "public"."swarm_sessions" validate constraint "swarm_sessions_user_id_users_id_fk";

alter table "public"."user_courses" add constraint "user_courses_course_id_fkey" FOREIGN KEY (course_id) REFERENCES courses(id) not valid;

alter table "public"."user_courses" validate constraint "user_courses_course_id_fkey";

alter table "public"."user_courses" add constraint "user_courses_user_id_course_id_key" UNIQUE using index "user_courses_user_id_course_id_key";

alter table "public"."user_courses" add constraint "user_courses_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(id) not valid;

alter table "public"."user_courses" validate constraint "user_courses_user_id_fkey";

alter table "public"."users" add constraint "users_id_fkey" FOREIGN KEY (id) REFERENCES users(id) not valid;

alter table "public"."users" validate constraint "users_id_fkey";

set check_function_bodies = off;

create or replace view "public"."decrypted_forms" as  SELECT forms.id,
    forms.user_id,
    forms.title,
    forms.status,
    forms.type,
    forms.form,
        CASE
            WHEN (forms.form IS NULL) THEN NULL::text
            ELSE
            CASE
                WHEN ('9ed936c8-1fea-4e19-aa3d-4e7ca82e3204' IS NULL) THEN NULL::text
                ELSE convert_from(pgsodium.crypto_aead_det_decrypt(decode(forms.form, 'base64'::text), convert_to(''::text, 'utf8'::name), '9ed936c8-1fea-4e19-aa3d-4e7ca82e3204'::uuid, NULL::bytea), 'utf8'::name)
            END
        END AS decrypted_form,
    forms.created_at,
    forms.user_email,
    forms.updated_at
   FROM forms;


create or replace view "public"."decrypted_notes" as  SELECT notes.id,
    notes.created_at,
    notes.updated_at,
    notes.user_id,
    notes.note,
        CASE
            WHEN (notes.note IS NULL) THEN NULL::text
            ELSE
            CASE
                WHEN ('806caf63-3fe5-4edd-8502-9f6648097675' IS NULL) THEN NULL::text
                ELSE convert_from(pgsodium.crypto_aead_det_decrypt(decode(notes.note, 'base64'::text), convert_to(''::text, 'utf8'::name), '806caf63-3fe5-4edd-8502-9f6648097675'::uuid, NULL::bytea), 'utf8'::name)
            END
        END AS decrypted_note,
    notes.event_id
   FROM notes;


create or replace view "public"."decrypted_reports" as  SELECT reports.id,
    reports.report,
        CASE
            WHEN (reports.report IS NULL) THEN NULL::text
            ELSE
            CASE
                WHEN ('d3532cef-12fb-43ab-b14a-b2c69a90262c' IS NULL) THEN NULL::text
                ELSE convert_from(pgsodium.crypto_aead_det_decrypt(decode(reports.report, 'base64'::text), convert_to(''::text, 'utf8'::name), 'd3532cef-12fb-43ab-b14a-b2c69a90262c'::uuid, NULL::bytea), 'utf8'::name)
            END
        END AS decrypted_report,
    reports.user_id,
    reports.created_at,
    reports.status,
    reports.updated_at
   FROM reports;


create or replace view "public"."decrypted_scheduled_events" as  SELECT scheduled_events.id,
    scheduled_events.created_at,
    scheduled_events.user_id,
    scheduled_events.start_time,
    scheduled_events.notes,
        CASE
            WHEN (scheduled_events.notes IS NULL) THEN NULL::text
            ELSE
            CASE
                WHEN ('83b2401d-ad62-4df0-9337-43731fba5be4' IS NULL) THEN NULL::text
                ELSE convert_from(pgsodium.crypto_aead_det_decrypt(decode(scheduled_events.notes, 'base64'::text), convert_to(''::text, 'utf8'::name), '83b2401d-ad62-4df0-9337-43731fba5be4'::uuid, NULL::bytea), 'utf8'::name)
            END
        END AS decrypted_notes,
    scheduled_events.status,
    scheduled_events.updated_at
   FROM scheduled_events;


CREATE OR REPLACE FUNCTION public.delete_claim(uid uuid, claim text)
 RETURNS text
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$
    BEGIN
      IF NOT is_claims_admin() THEN
          RETURN 'error: access denied';
      ELSE        
        update auth.users set raw_app_meta_data = 
          raw_app_meta_data - claim where id = uid;
        return 'OK';
      END IF;
    END;
$function$
;

CREATE OR REPLACE FUNCTION public.forms_encrypt_secret_form()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
		BEGIN
		        new.form = CASE WHEN new.form IS NULL THEN NULL ELSE
			CASE WHEN '9ed936c8-1fea-4e19-aa3d-4e7ca82e3204' IS NULL THEN NULL ELSE pg_catalog.encode(
			  pgsodium.crypto_aead_det_encrypt(
				pg_catalog.convert_to(new.form, 'utf8'),
				pg_catalog.convert_to(('')::text, 'utf8'),
				'9ed936c8-1fea-4e19-aa3d-4e7ca82e3204'::uuid,
				NULL
			  ),
				'base64') END END;
		RETURN new;
		END;
		$function$
;

CREATE OR REPLACE FUNCTION public.get_claim(uid uuid, claim text)
 RETURNS jsonb
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$
    DECLARE retval jsonb;
    BEGIN
      IF NOT is_claims_admin() THEN
          RETURN '{"error":"access denied"}'::jsonb;
      ELSE
        select coalesce(raw_app_meta_data->claim, null) from auth.users into retval where id = uid::uuid;
        return retval;
      END IF;
    END;
$function$
;

CREATE OR REPLACE FUNCTION public.get_claims(uid uuid)
 RETURNS jsonb
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$
    DECLARE retval jsonb;
    BEGIN
      IF NOT is_claims_admin() THEN
          RETURN '{"error":"access denied"}'::jsonb;
      ELSE
        select raw_app_meta_data from auth.users into retval where id = uid::uuid;
        return retval;
      END IF;
    END;
$function$
;

CREATE OR REPLACE FUNCTION public.get_my_claim(claim text)
 RETURNS jsonb
 LANGUAGE sql
 STABLE
AS $function$
  select 
  	coalesce(nullif(current_setting('request.jwt.claims', true), '')::jsonb -> 'app_metadata' -> claim, null)
$function$
;

CREATE OR REPLACE FUNCTION public.get_my_claims()
 RETURNS jsonb
 LANGUAGE sql
 STABLE
AS $function$
  select 
  	coalesce(nullif(current_setting('request.jwt.claims', true), '')::jsonb -> 'app_metadata', '{}'::jsonb)::jsonb
$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
  begin
    insert into public.users (id, full_name, avatar_url, email)
    values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url',
    new.email);
    return new;
  end;
$function$
;

CREATE OR REPLACE FUNCTION public.is_claims_admin()
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
  BEGIN
    IF session_user = 'authenticator' THEN
      --------------------------------------------
      -- To disallow any authenticated app users
      -- from editing claims, delete the following
      -- block of code and replace it with:
      -- RETURN FALSE;
      --------------------------------------------
      IF extract(epoch from now()) > coalesce((current_setting('request.jwt.claims', true)::jsonb)->>'exp', '0')::numeric THEN
        return false; -- jwt expired
      END IF;
      If current_setting('request.jwt.claims', true)::jsonb->>'role' = 'service_role' THEN
        RETURN true; -- service role users have admin rights
      END IF;
      IF coalesce((current_setting('request.jwt.claims', true)::jsonb)->'app_metadata'->'claims_admin', 'false')::bool THEN
        return true; -- user has claims_admin set to true
      ELSE
        return false; -- user does NOT have claims_admin set to true
      END IF;
      --------------------------------------------
      -- End of block 
      --------------------------------------------
    ELSE -- not a user session, probably being called from a trigger or something
      return true;
    END IF;
  END;
$function$
;

CREATE OR REPLACE FUNCTION public.notes_encrypt_secret_note()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
		BEGIN
		        new.note = CASE WHEN new.note IS NULL THEN NULL ELSE
			CASE WHEN '806caf63-3fe5-4edd-8502-9f6648097675' IS NULL THEN NULL ELSE pg_catalog.encode(
			  pgsodium.crypto_aead_det_encrypt(
				pg_catalog.convert_to(new.note, 'utf8'),
				pg_catalog.convert_to(('')::text, 'utf8'),
				'806caf63-3fe5-4edd-8502-9f6648097675'::uuid,
				NULL
			  ),
				'base64') END END;
		RETURN new;
		END;
		$function$
;

CREATE OR REPLACE FUNCTION public.reports_encrypt_secret_report()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
		BEGIN
		        new.report = CASE WHEN new.report IS NULL THEN NULL ELSE
			CASE WHEN 'd3532cef-12fb-43ab-b14a-b2c69a90262c' IS NULL THEN NULL ELSE pg_catalog.encode(
			  pgsodium.crypto_aead_det_encrypt(
				pg_catalog.convert_to(new.report, 'utf8'),
				pg_catalog.convert_to(('')::text, 'utf8'),
				'd3532cef-12fb-43ab-b14a-b2c69a90262c'::uuid,
				NULL
			  ),
				'base64') END END;
		RETURN new;
		END;
		$function$
;

CREATE OR REPLACE FUNCTION public.scheduled_events_encrypt_secret_notes()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
		BEGIN
		        new.notes = CASE WHEN new.notes IS NULL THEN NULL ELSE
			CASE WHEN '83b2401d-ad62-4df0-9337-43731fba5be4' IS NULL THEN NULL ELSE pg_catalog.encode(
			  pgsodium.crypto_aead_det_encrypt(
				pg_catalog.convert_to(new.notes, 'utf8'),
				pg_catalog.convert_to(('')::text, 'utf8'),
				'83b2401d-ad62-4df0-9337-43731fba5be4'::uuid,
				NULL
			  ),
				'base64') END END;
		RETURN new;
		END;
		$function$
;

CREATE OR REPLACE FUNCTION public.set_claim(uid uuid, claim text, value jsonb)
 RETURNS text
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$
    BEGIN
      IF NOT is_claims_admin() THEN
          RETURN 'error: access denied';
      ELSE        
        update auth.users set raw_app_meta_data = 
          raw_app_meta_data || 
            json_build_object(claim, value)::jsonb where id = uid;
        return 'OK';
      END IF;
    END;
$function$
;

grant delete on table "public"."courses" to "anon";

grant insert on table "public"."courses" to "anon";

grant references on table "public"."courses" to "anon";

grant select on table "public"."courses" to "anon";

grant trigger on table "public"."courses" to "anon";

grant truncate on table "public"."courses" to "anon";

grant update on table "public"."courses" to "anon";

grant delete on table "public"."courses" to "authenticated";

grant insert on table "public"."courses" to "authenticated";

grant references on table "public"."courses" to "authenticated";

grant select on table "public"."courses" to "authenticated";

grant trigger on table "public"."courses" to "authenticated";

grant truncate on table "public"."courses" to "authenticated";

grant update on table "public"."courses" to "authenticated";

grant delete on table "public"."courses" to "service_role";

grant insert on table "public"."courses" to "service_role";

grant references on table "public"."courses" to "service_role";

grant select on table "public"."courses" to "service_role";

grant trigger on table "public"."courses" to "service_role";

grant truncate on table "public"."courses" to "service_role";

grant update on table "public"."courses" to "service_role";

grant delete on table "public"."customers" to "anon";

grant insert on table "public"."customers" to "anon";

grant references on table "public"."customers" to "anon";

grant select on table "public"."customers" to "anon";

grant trigger on table "public"."customers" to "anon";

grant truncate on table "public"."customers" to "anon";

grant update on table "public"."customers" to "anon";

grant delete on table "public"."customers" to "authenticated";

grant insert on table "public"."customers" to "authenticated";

grant references on table "public"."customers" to "authenticated";

grant select on table "public"."customers" to "authenticated";

grant trigger on table "public"."customers" to "authenticated";

grant truncate on table "public"."customers" to "authenticated";

grant update on table "public"."customers" to "authenticated";

grant delete on table "public"."customers" to "service_role";

grant insert on table "public"."customers" to "service_role";

grant references on table "public"."customers" to "service_role";

grant select on table "public"."customers" to "service_role";

grant trigger on table "public"."customers" to "service_role";

grant truncate on table "public"."customers" to "service_role";

grant update on table "public"."customers" to "service_role";

grant delete on table "public"."events" to "anon";

grant insert on table "public"."events" to "anon";

grant references on table "public"."events" to "anon";

grant select on table "public"."events" to "anon";

grant trigger on table "public"."events" to "anon";

grant truncate on table "public"."events" to "anon";

grant update on table "public"."events" to "anon";

grant delete on table "public"."events" to "authenticated";

grant insert on table "public"."events" to "authenticated";

grant references on table "public"."events" to "authenticated";

grant select on table "public"."events" to "authenticated";

grant trigger on table "public"."events" to "authenticated";

grant truncate on table "public"."events" to "authenticated";

grant update on table "public"."events" to "authenticated";

grant delete on table "public"."events" to "service_role";

grant insert on table "public"."events" to "service_role";

grant references on table "public"."events" to "service_role";

grant select on table "public"."events" to "service_role";

grant trigger on table "public"."events" to "service_role";

grant truncate on table "public"."events" to "service_role";

grant update on table "public"."events" to "service_role";

grant delete on table "public"."forms" to "anon";

grant insert on table "public"."forms" to "anon";

grant references on table "public"."forms" to "anon";

grant select on table "public"."forms" to "anon";

grant trigger on table "public"."forms" to "anon";

grant truncate on table "public"."forms" to "anon";

grant update on table "public"."forms" to "anon";

grant delete on table "public"."forms" to "authenticated";

grant insert on table "public"."forms" to "authenticated";

grant references on table "public"."forms" to "authenticated";

grant select on table "public"."forms" to "authenticated";

grant trigger on table "public"."forms" to "authenticated";

grant truncate on table "public"."forms" to "authenticated";

grant update on table "public"."forms" to "authenticated";

grant delete on table "public"."forms" to "service_role";

grant insert on table "public"."forms" to "service_role";

grant references on table "public"."forms" to "service_role";

grant select on table "public"."forms" to "service_role";

grant trigger on table "public"."forms" to "service_role";

grant truncate on table "public"."forms" to "service_role";

grant update on table "public"."forms" to "service_role";

grant delete on table "public"."notes" to "anon";

grant insert on table "public"."notes" to "anon";

grant references on table "public"."notes" to "anon";

grant select on table "public"."notes" to "anon";

grant trigger on table "public"."notes" to "anon";

grant truncate on table "public"."notes" to "anon";

grant update on table "public"."notes" to "anon";

grant delete on table "public"."notes" to "authenticated";

grant insert on table "public"."notes" to "authenticated";

grant references on table "public"."notes" to "authenticated";

grant select on table "public"."notes" to "authenticated";

grant trigger on table "public"."notes" to "authenticated";

grant truncate on table "public"."notes" to "authenticated";

grant update on table "public"."notes" to "authenticated";

grant delete on table "public"."notes" to "service_role";

grant insert on table "public"."notes" to "service_role";

grant references on table "public"."notes" to "service_role";

grant select on table "public"."notes" to "service_role";

grant trigger on table "public"."notes" to "service_role";

grant truncate on table "public"."notes" to "service_role";

grant update on table "public"."notes" to "service_role";

grant delete on table "public"."old_user_meta" to "anon";

grant insert on table "public"."old_user_meta" to "anon";

grant references on table "public"."old_user_meta" to "anon";

grant select on table "public"."old_user_meta" to "anon";

grant trigger on table "public"."old_user_meta" to "anon";

grant truncate on table "public"."old_user_meta" to "anon";

grant update on table "public"."old_user_meta" to "anon";

grant delete on table "public"."old_user_meta" to "authenticated";

grant insert on table "public"."old_user_meta" to "authenticated";

grant references on table "public"."old_user_meta" to "authenticated";

grant select on table "public"."old_user_meta" to "authenticated";

grant trigger on table "public"."old_user_meta" to "authenticated";

grant truncate on table "public"."old_user_meta" to "authenticated";

grant update on table "public"."old_user_meta" to "authenticated";

grant delete on table "public"."old_user_meta" to "service_role";

grant insert on table "public"."old_user_meta" to "service_role";

grant references on table "public"."old_user_meta" to "service_role";

grant select on table "public"."old_user_meta" to "service_role";

grant trigger on table "public"."old_user_meta" to "service_role";

grant truncate on table "public"."old_user_meta" to "service_role";

grant update on table "public"."old_user_meta" to "service_role";

grant delete on table "public"."old_user_meta_duplicate" to "anon";

grant insert on table "public"."old_user_meta_duplicate" to "anon";

grant references on table "public"."old_user_meta_duplicate" to "anon";

grant select on table "public"."old_user_meta_duplicate" to "anon";

grant trigger on table "public"."old_user_meta_duplicate" to "anon";

grant truncate on table "public"."old_user_meta_duplicate" to "anon";

grant update on table "public"."old_user_meta_duplicate" to "anon";

grant delete on table "public"."old_user_meta_duplicate" to "authenticated";

grant insert on table "public"."old_user_meta_duplicate" to "authenticated";

grant references on table "public"."old_user_meta_duplicate" to "authenticated";

grant select on table "public"."old_user_meta_duplicate" to "authenticated";

grant trigger on table "public"."old_user_meta_duplicate" to "authenticated";

grant truncate on table "public"."old_user_meta_duplicate" to "authenticated";

grant update on table "public"."old_user_meta_duplicate" to "authenticated";

grant delete on table "public"."old_user_meta_duplicate" to "service_role";

grant insert on table "public"."old_user_meta_duplicate" to "service_role";

grant references on table "public"."old_user_meta_duplicate" to "service_role";

grant select on table "public"."old_user_meta_duplicate" to "service_role";

grant trigger on table "public"."old_user_meta_duplicate" to "service_role";

grant truncate on table "public"."old_user_meta_duplicate" to "service_role";

grant update on table "public"."old_user_meta_duplicate" to "service_role";

grant delete on table "public"."old_users" to "anon";

grant insert on table "public"."old_users" to "anon";

grant references on table "public"."old_users" to "anon";

grant select on table "public"."old_users" to "anon";

grant trigger on table "public"."old_users" to "anon";

grant truncate on table "public"."old_users" to "anon";

grant update on table "public"."old_users" to "anon";

grant delete on table "public"."old_users" to "authenticated";

grant insert on table "public"."old_users" to "authenticated";

grant references on table "public"."old_users" to "authenticated";

grant select on table "public"."old_users" to "authenticated";

grant trigger on table "public"."old_users" to "authenticated";

grant truncate on table "public"."old_users" to "authenticated";

grant update on table "public"."old_users" to "authenticated";

grant delete on table "public"."old_users" to "service_role";

grant insert on table "public"."old_users" to "service_role";

grant references on table "public"."old_users" to "service_role";

grant select on table "public"."old_users" to "service_role";

grant trigger on table "public"."old_users" to "service_role";

grant truncate on table "public"."old_users" to "service_role";

grant update on table "public"."old_users" to "service_role";

grant delete on table "public"."prices" to "anon";

grant insert on table "public"."prices" to "anon";

grant references on table "public"."prices" to "anon";

grant select on table "public"."prices" to "anon";

grant trigger on table "public"."prices" to "anon";

grant truncate on table "public"."prices" to "anon";

grant update on table "public"."prices" to "anon";

grant delete on table "public"."prices" to "authenticated";

grant insert on table "public"."prices" to "authenticated";

grant references on table "public"."prices" to "authenticated";

grant select on table "public"."prices" to "authenticated";

grant trigger on table "public"."prices" to "authenticated";

grant truncate on table "public"."prices" to "authenticated";

grant update on table "public"."prices" to "authenticated";

grant delete on table "public"."prices" to "service_role";

grant insert on table "public"."prices" to "service_role";

grant references on table "public"."prices" to "service_role";

grant select on table "public"."prices" to "service_role";

grant trigger on table "public"."prices" to "service_role";

grant truncate on table "public"."prices" to "service_role";

grant update on table "public"."prices" to "service_role";

grant delete on table "public"."products" to "anon";

grant insert on table "public"."products" to "anon";

grant references on table "public"."products" to "anon";

grant select on table "public"."products" to "anon";

grant trigger on table "public"."products" to "anon";

grant truncate on table "public"."products" to "anon";

grant update on table "public"."products" to "anon";

grant delete on table "public"."products" to "authenticated";

grant insert on table "public"."products" to "authenticated";

grant references on table "public"."products" to "authenticated";

grant select on table "public"."products" to "authenticated";

grant trigger on table "public"."products" to "authenticated";

grant truncate on table "public"."products" to "authenticated";

grant update on table "public"."products" to "authenticated";

grant delete on table "public"."products" to "service_role";

grant insert on table "public"."products" to "service_role";

grant references on table "public"."products" to "service_role";

grant select on table "public"."products" to "service_role";

grant trigger on table "public"."products" to "service_role";

grant truncate on table "public"."products" to "service_role";

grant update on table "public"."products" to "service_role";

grant delete on table "public"."reports" to "anon";

grant insert on table "public"."reports" to "anon";

grant references on table "public"."reports" to "anon";

grant select on table "public"."reports" to "anon";

grant trigger on table "public"."reports" to "anon";

grant truncate on table "public"."reports" to "anon";

grant update on table "public"."reports" to "anon";

grant delete on table "public"."reports" to "authenticated";

grant insert on table "public"."reports" to "authenticated";

grant references on table "public"."reports" to "authenticated";

grant select on table "public"."reports" to "authenticated";

grant trigger on table "public"."reports" to "authenticated";

grant truncate on table "public"."reports" to "authenticated";

grant update on table "public"."reports" to "authenticated";

grant delete on table "public"."reports" to "service_role";

grant insert on table "public"."reports" to "service_role";

grant references on table "public"."reports" to "service_role";

grant select on table "public"."reports" to "service_role";

grant trigger on table "public"."reports" to "service_role";

grant truncate on table "public"."reports" to "service_role";

grant update on table "public"."reports" to "service_role";

grant delete on table "public"."scheduled_events" to "anon";

grant insert on table "public"."scheduled_events" to "anon";

grant references on table "public"."scheduled_events" to "anon";

grant select on table "public"."scheduled_events" to "anon";

grant trigger on table "public"."scheduled_events" to "anon";

grant truncate on table "public"."scheduled_events" to "anon";

grant update on table "public"."scheduled_events" to "anon";

grant delete on table "public"."scheduled_events" to "authenticated";

grant insert on table "public"."scheduled_events" to "authenticated";

grant references on table "public"."scheduled_events" to "authenticated";

grant select on table "public"."scheduled_events" to "authenticated";

grant trigger on table "public"."scheduled_events" to "authenticated";

grant truncate on table "public"."scheduled_events" to "authenticated";

grant update on table "public"."scheduled_events" to "authenticated";

grant delete on table "public"."scheduled_events" to "service_role";

grant insert on table "public"."scheduled_events" to "service_role";

grant references on table "public"."scheduled_events" to "service_role";

grant select on table "public"."scheduled_events" to "service_role";

grant trigger on table "public"."scheduled_events" to "service_role";

grant truncate on table "public"."scheduled_events" to "service_role";

grant update on table "public"."scheduled_events" to "service_role";

grant insert on table "public"."scheduled_events" to "zapier";

grant delete on table "public"."subscriptions" to "anon";

grant insert on table "public"."subscriptions" to "anon";

grant references on table "public"."subscriptions" to "anon";

grant select on table "public"."subscriptions" to "anon";

grant trigger on table "public"."subscriptions" to "anon";

grant truncate on table "public"."subscriptions" to "anon";

grant update on table "public"."subscriptions" to "anon";

grant delete on table "public"."subscriptions" to "authenticated";

grant insert on table "public"."subscriptions" to "authenticated";

grant references on table "public"."subscriptions" to "authenticated";

grant select on table "public"."subscriptions" to "authenticated";

grant trigger on table "public"."subscriptions" to "authenticated";

grant truncate on table "public"."subscriptions" to "authenticated";

grant update on table "public"."subscriptions" to "authenticated";

grant delete on table "public"."subscriptions" to "service_role";

grant insert on table "public"."subscriptions" to "service_role";

grant references on table "public"."subscriptions" to "service_role";

grant select on table "public"."subscriptions" to "service_role";

grant trigger on table "public"."subscriptions" to "service_role";

grant truncate on table "public"."subscriptions" to "service_role";

grant update on table "public"."subscriptions" to "service_role";

grant delete on table "public"."swarm_sessions" to "anon";

grant insert on table "public"."swarm_sessions" to "anon";

grant references on table "public"."swarm_sessions" to "anon";

grant select on table "public"."swarm_sessions" to "anon";

grant trigger on table "public"."swarm_sessions" to "anon";

grant truncate on table "public"."swarm_sessions" to "anon";

grant update on table "public"."swarm_sessions" to "anon";

grant delete on table "public"."swarm_sessions" to "authenticated";

grant insert on table "public"."swarm_sessions" to "authenticated";

grant references on table "public"."swarm_sessions" to "authenticated";

grant select on table "public"."swarm_sessions" to "authenticated";

grant trigger on table "public"."swarm_sessions" to "authenticated";

grant truncate on table "public"."swarm_sessions" to "authenticated";

grant update on table "public"."swarm_sessions" to "authenticated";

grant delete on table "public"."swarm_sessions" to "service_role";

grant insert on table "public"."swarm_sessions" to "service_role";

grant references on table "public"."swarm_sessions" to "service_role";

grant select on table "public"."swarm_sessions" to "service_role";

grant trigger on table "public"."swarm_sessions" to "service_role";

grant truncate on table "public"."swarm_sessions" to "service_role";

grant update on table "public"."swarm_sessions" to "service_role";

grant delete on table "public"."user_courses" to "anon";

grant insert on table "public"."user_courses" to "anon";

grant references on table "public"."user_courses" to "anon";

grant select on table "public"."user_courses" to "anon";

grant trigger on table "public"."user_courses" to "anon";

grant truncate on table "public"."user_courses" to "anon";

grant update on table "public"."user_courses" to "anon";

grant delete on table "public"."user_courses" to "authenticated";

grant insert on table "public"."user_courses" to "authenticated";

grant references on table "public"."user_courses" to "authenticated";

grant select on table "public"."user_courses" to "authenticated";

grant trigger on table "public"."user_courses" to "authenticated";

grant truncate on table "public"."user_courses" to "authenticated";

grant update on table "public"."user_courses" to "authenticated";

grant delete on table "public"."user_courses" to "service_role";

grant insert on table "public"."user_courses" to "service_role";

grant references on table "public"."user_courses" to "service_role";

grant select on table "public"."user_courses" to "service_role";

grant trigger on table "public"."user_courses" to "service_role";

grant truncate on table "public"."user_courses" to "service_role";

grant update on table "public"."user_courses" to "service_role";

grant delete on table "public"."user_meta" to "anon";

grant insert on table "public"."user_meta" to "anon";

grant references on table "public"."user_meta" to "anon";

grant select on table "public"."user_meta" to "anon";

grant trigger on table "public"."user_meta" to "anon";

grant truncate on table "public"."user_meta" to "anon";

grant update on table "public"."user_meta" to "anon";

grant delete on table "public"."user_meta" to "authenticated";

grant insert on table "public"."user_meta" to "authenticated";

grant references on table "public"."user_meta" to "authenticated";

grant select on table "public"."user_meta" to "authenticated";

grant trigger on table "public"."user_meta" to "authenticated";

grant truncate on table "public"."user_meta" to "authenticated";

grant update on table "public"."user_meta" to "authenticated";

grant delete on table "public"."user_meta" to "service_role";

grant insert on table "public"."user_meta" to "service_role";

grant references on table "public"."user_meta" to "service_role";

grant select on table "public"."user_meta" to "service_role";

grant trigger on table "public"."user_meta" to "service_role";

grant truncate on table "public"."user_meta" to "service_role";

grant update on table "public"."user_meta" to "service_role";

grant delete on table "public"."users" to "anon";

grant insert on table "public"."users" to "anon";

grant references on table "public"."users" to "anon";

grant select on table "public"."users" to "anon";

grant trigger on table "public"."users" to "anon";

grant truncate on table "public"."users" to "anon";

grant update on table "public"."users" to "anon";

grant delete on table "public"."users" to "authenticated";

grant insert on table "public"."users" to "authenticated";

grant references on table "public"."users" to "authenticated";

grant select on table "public"."users" to "authenticated";

grant trigger on table "public"."users" to "authenticated";

grant truncate on table "public"."users" to "authenticated";

grant update on table "public"."users" to "authenticated";

grant delete on table "public"."users" to "service_role";

grant insert on table "public"."users" to "service_role";

grant references on table "public"."users" to "service_role";

grant select on table "public"."users" to "service_role";

grant trigger on table "public"."users" to "service_role";

grant truncate on table "public"."users" to "service_role";

grant update on table "public"."users" to "service_role";

grant select on table "public"."users" to "zapier";

grant delete on table "public"."videos" to "anon";

grant insert on table "public"."videos" to "anon";

grant references on table "public"."videos" to "anon";

grant select on table "public"."videos" to "anon";

grant trigger on table "public"."videos" to "anon";

grant truncate on table "public"."videos" to "anon";

grant update on table "public"."videos" to "anon";

grant delete on table "public"."videos" to "authenticated";

grant insert on table "public"."videos" to "authenticated";

grant references on table "public"."videos" to "authenticated";

grant select on table "public"."videos" to "authenticated";

grant trigger on table "public"."videos" to "authenticated";

grant truncate on table "public"."videos" to "authenticated";

grant update on table "public"."videos" to "authenticated";

grant delete on table "public"."videos" to "service_role";

grant insert on table "public"."videos" to "service_role";

grant references on table "public"."videos" to "service_role";

grant select on table "public"."videos" to "service_role";

grant trigger on table "public"."videos" to "service_role";

grant truncate on table "public"."videos" to "service_role";

grant update on table "public"."videos" to "service_role";

create policy "Enable read access for all users"
on "public"."courses"
as permissive
for select
to authenticated
using (true);


create policy "Enable insert for authenticated users"
on "public"."forms"
as permissive
for insert
to authenticated
with check ((auth.uid() = user_id));


create policy "Enable read for authenticated users"
on "public"."forms"
as permissive
for select
to authenticated
using (true);


create policy "Enable update for users based on user_id"
on "public"."forms"
as permissive
for update
to authenticated
using ((auth.uid() = user_id));


create policy "Enable read access for all users"
on "public"."old_user_meta"
as permissive
for select
to public
using (true);


create policy "Enable read access for all users"
on "public"."old_users"
as permissive
for select
to public
using (true);


create policy "Enable insert access for all users"
on "public"."reports"
as permissive
for insert
to authenticated
with check ((auth.uid() = user_id));


create policy "Enable read access for all users"
on "public"."reports"
as permissive
for select
to authenticated
using (true);


create policy "Enable all for admins users only"
on "public"."scheduled_events"
as permissive
for all
to authenticated
with check ((get_claim(auth.uid(), 'userlevel'::text) = '500'::jsonb));


create policy "Enable update for users based on user_id"
on "public"."scheduled_events"
as permissive
for insert
to authenticated
with check ((auth.uid() = user_id));


create policy "scheduled_events admin policy"
on "public"."scheduled_events"
as permissive
for all
to authenticated
using ((COALESCE((get_my_claim('userlevel'::text))::integer, 0) = 500))
with check ((COALESCE((get_my_claim('userlevel'::text))::integer, 0) = 500));


create policy "zapier can read from products table"
on "public"."scheduled_events"
as permissive
for insert
to zapier
with check (true);


create policy "Can only view own subs data."
on "public"."subscriptions"
as permissive
for select
to public
using ((auth.uid() = user_id));


create policy "Public access to swarm_sessions table."
on "public"."swarm_sessions"
as permissive
for all
to public
using (true);


create policy "zapier can read from products table"
on "public"."users"
as permissive
for select
to zapier
using (true);


CREATE TRIGGER forms_encrypt_secret_trigger_form BEFORE INSERT OR UPDATE OF form ON public.forms FOR EACH ROW EXECUTE FUNCTION forms_encrypt_secret_form();

CREATE TRIGGER notes_encrypt_secret_trigger_note BEFORE INSERT OR UPDATE OF note ON public.notes FOR EACH ROW EXECUTE FUNCTION notes_encrypt_secret_note();

CREATE TRIGGER reports_encrypt_secret_trigger_report BEFORE INSERT OR UPDATE OF report ON public.reports FOR EACH ROW EXECUTE FUNCTION reports_encrypt_secret_report();

CREATE TRIGGER scheduled_events_encrypt_secret_trigger_notes BEFORE INSERT OR UPDATE OF notes ON public.scheduled_events FOR EACH ROW EXECUTE FUNCTION scheduled_events_encrypt_secret_notes();

GRANT EXECUTE ON FUNCTION pgsodium.crypto_aead_det_decrypt(bytea, bytea, uuid, bytea) TO authenticated;

GRANT EXECUTE ON FUNCTION pgsodium.crypto_aead_det_encrypt(bytea, bytea, uuid, bytea) TO authenticated;


create schema if not exists "schema_name";

create table "schema_name"."table_name" (
);


create policy "Enable read access for all users"
on "schema_name"."table_name"
as permissive
for select
to public
using (true);